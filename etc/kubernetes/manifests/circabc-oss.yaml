################################################################################
#      Copyright (C) 2020        Sebastian Francisco Colomar Bauza             #
#      SPDX-License-Identifier:  GPL-2.0-only                                  #
################################################################################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx.conf
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log debug;
    pid /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    include /etc/nginx/conf.d/*.conf;  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-args
data:
  args1: '--lower_case_table_names=1'
  args2: '--transaction-isolation=READ-COMMITTED'
---
apiVersion: v1
kind: Secret
metadata:
  name: db-init
stringData:
  setup.sql: |
    CREATE USER 'alfresco' IDENTIFIED BY 'alfresco';
    CREATE DATABASE alfresco DEFAULT CHARACTER SET utf8;
    GRANT ALL ON alfresco.* TO 'alfresco';
    CREATE USER 'circabc_audit' IDENTIFIED BY 'circabc_audit';
    CREATE DATABASE circabc_audit DEFAULT CHARACTER SET utf8;
    GRANT ALL ON circabc_audit.* TO 'circabc_audit';
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: angular
spec:
  replicas: 1
  selector:
    matchLabels:
      app: angular
  template:
    metadata:
      labels:
        app: angular
    spec:
      containers:
      - name: angular
        image: academiaonline/circabc-oss:latest-angular
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          protocol: TCP        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      labels:
        app: tomcat
    spec:
      containers:
      - name: tomcat
        image: academiaonline/circabc-oss:latest-tomcat
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        args:
        - $(MYSQL_ARG_1)
        - $(MYSQL_ARG_2)
        env:
        - name: MYSQL_ARG_1
          valueFrom:
            configMapKeyRef:
              key: args1
              name: db-args
        - name: MYSQL_ARG_2
          valueFrom:
            configMapKeyRef:
              key: args2
              name: db-args
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MYSQL_ROOT_PASSWORD
              name: db
        image: mysql:5.6
        ports:
        - containerPort: 3306
          protocol: TCP        
        volumeMounts:
        - name: db
          mountPath: /var/lib/mysql
        - name: db-init
          mountPath: /docker-entrypoint-initdb.d/setup.sql
          readOnly: true
          subPath: setup.sql          
      volumes:
      - name: db
        persistentVolumeClaim:
          claimName: db
      - name: db-init
        secret:
          items:
          - key: setup.sql
            path: setup.sql
          secretName: db-init
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /tmp/db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: db
stringData:
  MYSQL_ROOT_PASSWORD: password
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db_admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db_admin
  template:
    metadata:
      labels:
        app: db_admin
    spec:
      containers:
      - name: db_admin
        env:
        - name: PMA_ARBITRARY
          valueFrom:
            secretKeyRef:
              key: PMA_ARBITRARY
              name: db_admin
        - name: PMA_HOST
          valueFrom:
            secretKeyRef:
              key: PMA_HOST
              name: db_admin
        - name: PMA_PORT
          valueFrom:
            secretKeyRef:
              key: PMA_PORT
              name: db_admin      
        image: phpmyadmin/phpmyadmin
        ports:
        - containerPort: 80
          protocol: TCP        
---
apiVersion: v1
kind: Secret
metadata:
  name: db_admin
stringData:
  PMA_ARBITRARY: 1
  PMA_HOST: db
  PMA_PORT: 3306
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      labels:
        app: proxy
    spec:
      containers:
      - name: proxy
        image: academiaonline/nginx:8.2
        ports:
        - containerPort: 80
          protocol: TCP        
        - containerPort: 443
          protocol: TCP
        volumeMounts:
        - name: nginx-default
          mountPath: /etc/nginx/conf.d/default.conf
          readOnly: true
          subPath: default.conf
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf
          readOnly: true
          subPath: nginx.conf
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-conf
        configMap:
          items:
          - key: nginx.conf
            path: nginx.conf
          name: nginx.conf
      - name: nginx-default
        secret:
          items:
          - key: default.conf
            path: default.conf
          secretName: default.conf
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}          
---
apiVersion: v1
kind: Secret
metadata:
  name: default.conf
stringData:
  default.conf: |
    http {
      server {
        server_name _;
        listen 80 ;
        location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass http://tomcat:8080;
    #      rewrite ^/yourService1(.*)$ $1 break;
        }
        location /ui {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass http://angular:80;
    #      rewrite ^/yourService1(.*)$ $1 break;
        }
      }
      client_max_body_size 300m;
    }
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: angular
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: angular
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: db
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: tomcat
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: tomcat
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: db_admin
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: db_admin
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: proxy
spec:
  ports:
  - port: 80
#    nodePort: 30080
    targetPort: 80
  - port: 443
#    nodePort: 30443
    targetPort: 443
  selector:
    app: proxy
#  type: NodePort
---
